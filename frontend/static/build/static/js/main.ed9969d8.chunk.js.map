{"version":3,"sources":["components/Form.jsx","components/YourPosts.jsx","components/Edit.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["NatureForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","caption","file","preview","handleInput","bind","assertThisInitialized","handleSubmit","fileInput","React","createRef","event","_this2","obj","target","name","value","files","console","log","fileReader","FileReader","onload","setState","result","readAsDataURL","e","addPost","imageCaption","current","react_default","a","createElement","id","onSubmit","preventDefault","ref","type","onChange","src","alt","width","height","placeholder","className","onClick","Component","YourPosts","posts","map","post","key","user","username","nature_upload","post_caption","edit","href","concat","EditPost","handleUpdate","handleDelete","update","delete","App","isEditing","_addPost","_doEdit","_update","_delete","dataObj","formData","FormData","append","fetch","method","body","then","response","json","JSON","stringify","push","catch","error","newData","headers","Content-Type","_this3","status","Error","Edit","cancel","_cancel","components_Form","src_components_YourPosts","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed9969d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Form.css';\n\n\nclass NatureForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            caption: '',\n            file: '',\n            preview: null\n        }\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.fileInput = React.createRef();\n    }\n    handleInput(event){\n        let obj = {}\n\n        if(event.target.name !== 'image'){\n            obj[event.target.name] = event.target.value;\n        }else{\n            let file = event.target.files[0];\n            obj.file = file;\n            console.log({'file': file})\n\n            let fileReader = new FileReader()\n            fileReader.onload = () => this.setState({preview: fileReader.result});\n            fileReader.readAsDataURL(file);\n        }\n\n        this.setState(obj);\n    };\n\n    handleSubmit(e){\n        this.props.addPost({file: this.state.file, imageCaption: this.state.caption})\n        this.setState({caption: '', file: '', preview: null});\n        this.fileInput.current.value = '';\n    }\n\n    render() {\n        return(\n            <form id=\"uploadForm\"onSubmit={e =>{e.preventDefault(); }}>\n                <div>\n                    <input ref={this.fileInput} id=\"fileItem\" type=\"file\" onChange={this.handleInput} name=\"image\"/>\n                </div>\n                <div>\n                    <img id=\"imagePreview\" src={this.state.preview} alt=\"\" width='400px' height='450px'/>\n                </div>\n                <div id=\"theCaption\">\n                    <input id=\"enterCaption\" type=\"text\" placeholder='Enter Caption' value={this.state.caption} name='caption' onChange={this.handleInput}/>\n                    <button id=\"submitButton\" className=\"btn btn-outline-info my-2 my-sm-0\" onClick={this.handleSubmit} value=\"submit me\">POST</button>\n                </div>\n            </form>\n        );\n    }\n}\nexport default NatureForm;","import React, { Component } from 'react';\nimport './YourPosts.css';\n\nclass YourPosts extends Component{\n\n  render() {\n    console.log('posts', this.props.posts)\n    let posts = this.props.posts.map(post => {\n      return (\n        <li key={post.id}>\n          <div className=\"yourpostname\">\n            <h6>@{post.user.username}</h6>\n          </div>\n          <img src={post.nature_upload} alt=\"\" width='500px' height='550px'/>\n          <div id=\"postcaption\">\n            <h4 className=\"yourpostscaption\">{post.post_caption}</h4>\n          </div>\n          <div id=\"editPostB\">\n            <button className=\"btn btn-outline-info my-2 my-sm-0\" id=\"editPostButton\" onClick={() => this.props.edit(post)}>Edit</button>\n          </div>\n          <div id='map'>\n            <a href={`/map/${post.id}/`} className=\"btn btn-outline-info my-2 my-sm-0\">See Location</a>\n          </div>\n          <hr/>\n        </li>\n      );\n    });\n\n    return(\n      <div id=\"usersposts\">\n        <h1>Your Posts</h1>\n        <ul>\n          {posts}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default YourPosts;\n","import React, {Component} from 'react';\nimport './Form.css';\n// import {Modal, Button} from 'react-bootstrap'\n\n\nclass EditPost extends Component {\n  constructor(props) {\n    super(props);\n\n    let post = props.post;\n\n    this.state = {\n      caption: post.post_caption,\n      preview: post.nature_upload,\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  handleInput(event) {\n    let obj = {}\n\n    obj[event.target.name] = event.target.value;\n\n    this.setState(obj);\n  };\n\n  handleUpdate(e) {\n    e.preventDefault();\n    this.props.update({post_caption: this.state.caption, nature_upload: this.state.preview});\n  }\n\n handleDelete(e){\n    this.props.delete();\n }\n\n\n\n\n  render() {\n    console.log(this.props.post)\n    return (\n      <form id=\"uploadForm\" onSubmit={e => {\n        e.preventDefault();\n      }}>\n        <h1 id=\"editPostText\">EDIT POST</h1>\n        <hr/>\n        <div>\n          <img id=\"imagePreview\" src={this.state.preview} alt=\"\" width='400px' height='450px'/>\n        </div>\n        <div id=\"theCaption\">\n          <input id=\"enterCaption\" type=\"text\" placeholder='Enter Caption' value={this.state.caption} name='caption'\n                 onChange={this.handleInput}/>\n          <button\n            id=\"submitButton\" className=\"btn btn-outline-info my-2 my-sm-0\" onClick={this.handleUpdate}\n            value=\"submit me\">Save\n          </button>\n          <button\n            id=\"submitButton\" className=\"btn btn-outline-info my-2 my-sm-0\" onClick={this.handleDelete}>Delete\n          </button>\n\n        </div>\n      </form>\n    );\n  }\n}\n\n\nexport default EditPost;\n","import React, {Component} from 'react';\nimport NatureForm from '../components/Form';\nimport YourPosts from '../components/YourPosts';\nimport EditPost from \"../components/Edit\";\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      posts: [],\n      isEditing: false,\n    }\n    this._addPost = this._addPost.bind(this);\n    this._doEdit = this._doEdit.bind(this);\n    this._update = this._update.bind(this);\n    this._delete = this._delete.bind(this);\n  }\n\n  _doEdit(post) {\n    this.setState({isEditing: post});\n  }\n\n  _addPost(dataObj) {\n    console.log('post', dataObj)\n    let file = dataObj.file;\n    let imageCaption = dataObj.imageCaption;\n\n    let formData = new FormData();\n    formData.append('nature_upload', file);\n    formData.append('post_caption', imageCaption)\n\n    fetch(`/api/post/`, {\n      method: 'POST',\n      body: formData\n    }).then(response => response.json())\n      .then(json => {\n        console.log('Success', JSON.stringify(json))\n        console.log(json)\n        let posts = this.state.posts\n        posts.push(json)\n        this.setState({posts: posts})\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n\n  _update(dataObj) {\n    let newData = {\n      'post_caption': dataObj.post_caption\n    }\n\n    fetch(`api/post/${this.state.isEditing.id}/update/`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({newData})\n    }).then(response => response.json())\n    .then(json => {\n      console.log('Put Success', JSON.stringify(json))\n      console.log(json)\n\n      console.log({'newData': newData})\n      // let updatedPost = this.state.posts\n      // updatedPost.map()\n      // this.setState({posts: updatedPost})\n\n    })\n    .catch(error => console.log('Error', error))\n    this.setState({isEditing: false})\n  }\n\n\n  _delete() {\n    fetch(`/api/post/${this.state.isEditing.id}/delete/`, {\n      method: 'DELETE',\n    }).then(response => response.json())\n      .then(json => {\n        console.log('delete Success', JSON.stringify(json))\n        console.log(json)\n        // let afterDelete = this.state.posts\n        // this.setState({posts: afterDelete})\n      })\n      .catch(error => console.log('Error', error))\n    this.setState({isEditing: false})\n  }\n\n\n  componentDidMount() {\n    fetch(`/api/post/`, {\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return response.json()\n      } else {\n        throw new Error(\"Something's wrong.\");\n      }\n    }).then(json => this.setState({posts: json}))\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    console.log(this.state.isEditing)\n    return (\n      <div className=\"App\">\n\n        {this.state.isEditing ? (\n          <EditPost post={this.state.isEditing} update={this._update} delete={this._delete} cancel={this._cancel}/>) : (\n          <div>\n            <NatureForm addPost={this._addPost}/>\n            <YourPosts posts={this.state.posts} edit={this._doEdit}/>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}